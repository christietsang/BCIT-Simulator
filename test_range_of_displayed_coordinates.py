from unittest import TestCase
from game import range_of_displayed_coordinates


class Test(TestCase):

    def test_range_of_displayed_coordinates_length_of_list(self):
        character = {"x-coordinate": 0, "y-coordinate": 0}
        expected_output = 100
        actual_output = len(range_of_displayed_coordinates(character))
        self.assertEqual(expected_output, actual_output)

    def test_range_of_displayed_coordinates_zeroes(self):
        character = {"x-coordinate": 0, "y-coordinate": 0}
        expected_output = [(-4, -4), (-4, -3), (-4, -2), (-4, -1), (-4, 0), (-4, 1), (-4, 2),
                           (-4, 3), (-4, 4), (-4, 5), (-3, -4), (-3, -3), (-3, -2), (-3, -1),
                           (-3, 0), (-3, 1), (-3, 2), (-3, 3), (-3, 4), (-3, 5), (-2, -4),
                           (-2, -3), (-2, -2), (-2, -1), (-2, 0), (-2, 1), (-2, 2), (-2, 3),
                           (-2, 4), (-2, 5), (-1, -4), (-1, -3), (-1, -2), (-1, -1), (-1, 0),
                           (-1, 1), (-1, 2), (-1, 3), (-1, 4), (-1, 5), (0, -4), (0, -3), (0, -2),
                           (0, -1), (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, -4),
                           (1, -3), (1, -2), (1, -1), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4),
                           (1, 5), (2, -4), (2, -3), (2, -2), (2, -1), (2, 0), (2, 1), (2, 2),
                           (2, 3), (2, 4), (2, 5), (3, -4), (3, -3), (3, -2), (3, -1), (3, 0),
                           (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, -4), (4, -3), (4, -2),
                           (4, -1), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, -4),
                           (5, -3), (5, -2), (5, -1), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4),
                           (5, 5)]
        actual_output = range_of_displayed_coordinates(character)
        self.assertEqual(expected_output, actual_output)

    def test_range_of_displayed_coordinates_large_negative_coordinates(self):
        character = {"x-coordinate": -10, "y-coordinate": -10}
        expected_output = [(-14, -14), (-14, -13), (-14, -12), (-14, -11), (-14, -10), (-14, -9),
                           (-14, -8), (-14, -7), (-14, -6), (-14, -5), (-13, -14), (-13, -13),
                           (-13, -12), (-13, -11), (-13, -10), (-13, -9), (-13, -8), (-13, -7),
                           (-13, -6), (-13, -5), (-12, -14), (-12, -13), (-12, -12), (-12, -11),
                           (-12, -10), (-12, -9), (-12, -8), (-12, -7), (-12, -6), (-12, -5),
                           (-11, -14), (-11, -13), (-11, -12), (-11, -11), (-11, -10), (-11, -9),
                           (-11, -8), (-11, -7), (-11, -6), (-11, -5), (-10, -14), (-10, -13),
                           (-10, -12), (-10, -11), (-10, -10), (-10, -9), (-10, -8), (-10, -7),
                           (-10, -6), (-10, -5), (-9, -14), (-9, -13), (-9, -12), (-9, -11),
                           (-9, -10), (-9, -9), (-9, -8), (-9, -7), (-9, -6), (-9, -5), (-8, -14),
                           (-8, -13), (-8, -12), (-8, -11), (-8, -10), (-8, -9), (-8, -8), (-8, -7),
                           (-8, -6), (-8, -5), (-7, -14), (-7, -13), (-7, -12), (-7, -11),
                           (-7, -10), (-7, -9), (-7, -8), (-7, -7), (-7, -6), (-7, -5), (-6, -14),
                           (-6, -13), (-6, -12), (-6, -11), (-6, -10), (-6, -9), (-6, -8), (-6, -7),
                           (-6, -6), (-6, -5), (-5, -14), (-5, -13), (-5, -12), (-5, -11),
                           (-5, -10), (-5, -9), (-5, -8), (-5, -7), (-5, -6), (-5, -5)]
        actual_output = range_of_displayed_coordinates(character)
        self.assertEqual(expected_output, actual_output)

    def test_range_of_displayed_coordinates_unequal_large_positive_coordinates(self):
        character = {"x-coordinate": 50, "y-coordinate": 25}
        expected_output = [(46, 21), (46, 22), (46, 23), (46, 24), (46, 25), (46, 26), (46, 27),
                           (46, 28), (46, 29), (46, 30), (47, 21), (47, 22), (47, 23), (47, 24),
                           (47, 25), (47, 26), (47, 27), (47, 28), (47, 29), (47, 30), (48, 21),
                           (48, 22), (48, 23), (48, 24), (48, 25), (48, 26), (48, 27), (48, 28),
                           (48, 29), (48, 30), (49, 21), (49, 22), (49, 23), (49, 24), (49, 25),
                           (49, 26), (49, 27), (49, 28), (49, 29), (49, 30), (50, 21), (50, 22),
                           (50, 23), (50, 24), (50, 25), (50, 26), (50, 27), (50, 28), (50, 29),
                           (50, 30), (51, 21), (51, 22), (51, 23), (51, 24), (51, 25), (51, 26),
                           (51, 27), (51, 28), (51, 29), (51, 30), (52, 21), (52, 22), (52, 23),
                           (52, 24), (52, 25), (52, 26), (52, 27), (52, 28), (52, 29), (52, 30),
                           (53, 21), (53, 22), (53, 23), (53, 24), (53, 25), (53, 26), (53, 27),
                           (53, 28), (53, 29), (53, 30), (54, 21), (54, 22), (54, 23), (54, 24),
                           (54, 25), (54, 26), (54, 27), (54, 28), (54, 29), (54, 30), (55, 21),
                           (55, 22), (55, 23), (55, 24), (55, 25), (55, 26), (55, 27), (55, 28),
                           (55, 29), (55, 30)]
        actual_output = range_of_displayed_coordinates(character)
        self.assertEqual(expected_output, actual_output)
